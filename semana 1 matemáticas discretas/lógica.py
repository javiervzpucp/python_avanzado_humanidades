# -*- coding: utf-8 -*-
"""
Created on Sun Feb 16 22:03:57 2025

@author: jveraz
"""

##################################
# LÃ³gica Proposicional en Python #
##################################

# ðŸ”¹ Â¿QuÃ© es la lÃ³gica proposicional?
# Es un sistema que estudia el razonamiento lÃ³gico usando proposiciones y operadores lÃ³gicos.

# ðŸ”¹ Operadores lÃ³gicos en Python:
# - NOT â†’ `not`
# - AND â†’ `and`
# - OR  â†’ `or`
# - ImplicaciÃ³n lÃ³gica (p â†’ q) â†’ Se implementa como `not p or q`

# ðŸ”¹ EvaluaciÃ³n de expresiones lÃ³gicas

p = True
q = False

print("p AND q:", p and q)  # Evaluar la conjunciÃ³n lÃ³gica
print("p OR q:", p or q)  # Evaluar la disyunciÃ³n lÃ³gica
print("NOT p:", not p)  # Evaluar la negaciÃ³n lÃ³gica
print("p â†’ q:", (not p) or q)  # Evaluar la implicaciÃ³n lÃ³gica

# ðŸ”¹ Tabla de verdad en Python

def tabla_verdad():
    """
    Genera una tabla de verdad para operaciones lÃ³gicas.
    """
    print(" p | q | p AND q | p OR q | NOT p | p â†’ q ")
    print("-----------------------------------------")
    for p in [True, False]:
        for q in [True, False]:
            print(f" {int(p)} | {int(q)} |   {int(p and q)}    |   {int(p or q)}    |   {int(not p)}   |   {int((not p) or q)} ")

tabla_verdad()

# ðŸ”¹ AplicaciÃ³n en Humanidades Digitales
# Supongamos que queremos analizar la relaciÃ³n entre autores en una base de datos.

autores = {
    "Autor A": {"Autor B": True, "Autor C": False},
    "Autor B": {"Autor A": True, "Autor C": True},
    "Autor C": {"Autor A": False, "Autor B": True},
}

# Queremos verificar si dos autores han colaborado en un artÃ­culo:
def han_colaborado(autor1, autor2, base_datos):
    """
    Determina si dos autores han colaborado juntos en una publicaciÃ³n.
    """
    return base_datos.get(autor1, {}).get(autor2, False)

print("Â¿Autor A y Autor B han trabajado juntos?", han_colaborado("Autor A", "Autor B", autores))
print("Â¿Autor A y Autor C han trabajado juntos?", han_colaborado("Autor A", "Autor C", autores))
